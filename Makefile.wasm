EMSDK_ROOT := /home/sam/code/emsdk
QT_HOME := /home/sam/code/Qt/6.3.0

EMCC := ${EMSDK_ROOT}/upstream/emscripten/emcc
EMCXX := ${EMSDK_ROOT}/upstream/emscripten/em++
EMCMAKE := ${EMSDK_ROOT}/upstream/emscripten/emcmake
EMMAKE := ${EMSDK_ROOT}/upstream/emscripten/emmake

WASM_QMAKE := ${QT_HOME}/wasm_32/bin/qmake

UIC := ${QT_HOME}/gcc_64/libexec/uic
MOC := ${QT_HOME}/gcc_64/libexec/moc
RCC := ${QT_HOME}/gcc_64/libexec/rcc

SED := sed
MKDIR := mkdir

OUTPUT_DIR := $(shell realpath ./build_dir_for_wasm_output)
THIS_DIR := $(shell realpath .)

APP_OBJS_OUTPUT_DIR := ${OUTPUT_DIR}/app_objs
UI_MAINWINDOW_HH := ${OUTPUT_DIR}/ui_mainwindow.hh
MOC_FILE := ${OUTPUT_DIR}/moc_mainwindow.cc

FLUIDSYNTH_LIB := ${OUTPUT_DIR}/libfluidsynth.a
QT_CORE_LIB := ${OUTPUT_DIR}/qt/qtbase/lib/libQt6Core.a

# ## Need to install qtsharedtools with the maintenance tools

APP_SRC := ${THIS_DIR}/src/main.cc  \
	   ${THIS_DIR}/src/mainwindow.cc \
	   ${THIS_DIR}/src/keyboard.cc \
	   ${THIS_DIR}/src/signals_handler.cc \
	   ${THIS_DIR}/src/bin_file_reader.cc \
	   ${THIS_DIR}/src/utils.cc \
	   ${THIS_DIR}/src/measures_sequence_extractor.cc \
	   ${THIS_DIR}/src/sound_player.cc \
	   ${THIS_DIR}/src/load_file_from_wasm.cc

APP_OBJS := ${APP_SRC:${THIS_DIR}/src/%.cc=${APP_OBJS_OUTPUT_DIR}/%.o}


all: app

${APP_OBJS_OUTPUT_DIR}: ${OUTPUT_DIR}
	"${MKDIR}" -p "$@"

${OUTPUT_DIR}:
	"${MKDIR}" -p "$@"

${FLUIDSYNTH_LIB}: ${OUTPUT_DIR}
	set -eux ; \
	if [ -e "$@" ] ; then \
	  echo "$@ already exists. Remove it to rebuild it." >&2 ; \
	else \
	  "${EMSDK_ROOT}/emsdk" activate || exit 2 ; \
	  cd "${EMSDK_ROOT}" || exit 3 ; \
	  . "${EMSDK_ROOT}/emsdk_env.sh" || exit 4 ; \
	  "${MKDIR}" -p "${OUTPUT_DIR}/fluidsynth-emscripten" || exit 5 ; \
	  "${EMCMAKE}" cmake -Denable-oss=off \
	                -D CMAKE_BUILD_TYPE=Release \
	                -D BUILD_SHARED_LIBS=off \
	                -D CMAKE_C_FLAGS=-D__EMSCRIPTEN_PTHREADS__=1 \
	                -S "${THIS_DIR}/3rd-party/fluidsynth-emscripten/" \
	                -B "${OUTPUT_DIR}/fluidsynth-emscripten" ; \
	  "${EMMAKE}" make -C "${OUTPUT_DIR}/fluidsynth-emscripten"  V=1 VERBOSE=1 -j || exit 6 ; \
	  FLUID_LIB="$$(find "${OUTPUT_DIR}/fluidsynth-emscripten" -name 'libfluidsynth.a' | head -n 1)" ; \
	  [ -f "$$FLUID_LIB" ] || exit 7 ; \
	  cp -- "$$FLUID_LIB" "$@" || exit 8 ; \
	fi



fluidsynth: ${FLUIDSYNTH_LIB}

${UI_MAINWINDOW_HH}: ${THIS_DIR}/src/mainwindow.ui ${OUTPUT_DIR}
	"${UIC}" -o "$@" "$<"
	"${SED}" -i '1i // Avoid warnings on generated headers\n#if !defined(__clang__)\n  #pragma GCC system_header\n#endif\n' "$@"
	"${SED}" -i 's/^#include <mainwindow.h>$$/#include "mainwindow.hh"/' "$@"
	"${SED}" -i 's/QObject::connect(\(.*\), MainWindow, qOverload<>(&QMainWindow::/QObject::connect(\1, reinterpret_cast<::MainWindow*>(MainWindow), qOverload<>(\&::MainWindow::/' "$@"

${MOC_FILE}:  ${THIS_DIR}/src/mainwindow.hh ${OUTPUT_DIR}
	"${MOC}" -o "$@" "$<"


${QT_CORE_LIB}: ${OUTPUT_DIR}
	if [ -e "$@" ] ; then \
	  echo "$@ already exists. Remove it to rebuild it." >&2 ; \
	else \
	  cd "${THIS_DIR}/3rd-party/qt5/" || exit 2 ; \
	  "${THIS_DIR}/3rd-party/qt5/init-repository"  \
	    --module-subset=qtsvg,qtbase,qtimageformats \
	    -f || exit 3 ; \
	  cd "${THIS_DIR}/3rd-party/qt5/" || exit 4 ; \
	  "${THIS_DIR}/3rd-party/qt5/configure" \
	    -static \
	    -release \
	    -no-guess-compiler \
	    -qt-host-path "${QT_HOME}/gcc_64/" \
	    -c++std c++17 \
	    -sse2 \
	    -gui \
	    -widgets \
	    -no-dbus \
	    -no-glib \
	    -no-ssl \
	    -nomake examples \
	    -feature-thread \
	    -xplatform wasm-emscripten \
	    -opensource \
	    -confirm-license \
	    -submodules qtgui,qtwidgets,qtsvg \
	    -skip qtdeclarative,qtdoc,qttools,qtdatavis3d,qtcharts,qt5compat,qtmultimedia,qtlottie,qtmqtt,qtopcua,qtquicktimeline,qtquick3d,qtscxml,qttranslations,qtvirtualkeyboard,qtwebengine,qtwebview,qtquick3d,qtwayland,qtwebglplugin,qtxmlpatterns,qtpositioning,qtgamepad,qtcanvas3d,qtconnectivity,qt3d,qtremoteobjects \
	    -- -B "${OUTPUT_DIR}/qt" || exit 5 ; \
	  ninja --verbose -C "${OUTPUT_DIR}/qt" || exit 6 ; \
	fi

qt: ${QT_CORE_LIB}

${APP_OBJS_OUTPUT_DIR}/%.o: ${THIS_DIR}/src/%.cc | ${APP_OBJS_OUTPUT_DIR}  ${FLUIDSYNTH_LIB} ${QT_CORE_LIB}
	${EMCC} \
	  -pthread \
	  -O2 \
	  -std=c++17 \
	  -I ${OUTPUT_DIR}/fluidsynth-emscripten/include \
	  -I ${THIS_DIR}/3rd-party/fluidsynth-emscripten/include \
	  -I ${QT_HOME}/wasm_32/include \
	  -I ${QT_HOME}/wasm_32/include/QtSvgWidgets \
	  -I ${QT_HOME}/wasm_32/include/QtWidgets \
	  -I ${QT_HOME}/wasm_32/include/QtSvg \
	  -I ${QT_HOME}/wasm_32/include/QtGui \
	  -I ${QT_HOME}/wasm_32/include/QtCore \
	  -c \
	  -o "$@" \
	  "$<"

app_objs: ${APP_OBJS}

app: ${QT_CORE_LIB} ${FLUIDSYNTH_LIB} ${APP_OBJS} ${UI_MAINWINDOW_HH} ${MOC_FILE}

clean:
	[ -d "${OUTPUT_DIR}" ] && rm -rf "${OUTPUT_DIR}"

.PHONY: all clean ${FLUIDSYNTH_LIB} fluidsynth qt ${QT_CORE_LIB} app app_objs
